{"version":3,"sources":["store/evaluator.ts","store/index.ts","components/WordInput.tsx","components/WordList.tsx","components/NewGameButton.tsx","components/GameOver.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["evaluateCorrect","candidate","solution","filter","char","index","length","evaluatePresent","presentLetters","count","Map","set","get","c","evaluate","candidateChars","toLowerCase","split","solutionChars","correctLetters","slice","createSlice","name","initialState","codeword","guesses","gameOver","reducers","startNewGame","state","rword","generate","guessWord","action","guess","payload","unshift","store","configureStore","reducer","actions","mapDispatchToProps","connector","connect","useState","word","setWord","onSubmit","event","preventDefault","type","autoFocus","value","onChange","target","map","undefined","onClick","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gYAeMA,EAAkB,SAACC,EAAqBC,GAAtB,OACpBD,EAAUE,QAAO,SAACC,EAAMC,GAAP,OAAiBH,EAASG,KAAWD,KAAME,QAE1DC,EAAkB,SAACN,EAAqBC,GAC1C,IADiE,EAC7DM,EAAiB,EACfC,EAAQ,IAAIC,IAF+C,cAG9CT,GAH8C,2BAGtDG,EAHsD,QAI7DK,EAAME,IAAIP,GAAM,UAACK,EAAMG,IAAIR,UAAX,QAAoB,GAAK,GACrCF,EAASC,QAAO,SAAAU,GAAC,OAAIA,IAAMT,KAAME,QAAUG,EAAMG,IAAIR,IACrDI,KAHR,2BAA+B,IAHkC,8BASjE,OAAOA,GAGIM,EA5BE,SAACb,EAAmBC,GACjC,IAAMa,EAAiBd,EAAUe,cAAcC,MAAM,IAC/CC,EAAgBhB,EAASc,cAAcC,MAAM,IAC7CE,EAAiBnB,EAAgBe,EAAgBG,GAGvD,MAAO,CACHjB,YACAkB,iBACAX,eALmBD,EAAgBQ,EAAgBG,GAAiBC,I,SCgBtEC,EAAQC,YAAY,CACtBC,KAAM,aACNC,aAR6B,CAC7BC,SAAU,GACVC,QAAS,GACTC,UAAU,GAMVC,SAAU,CACNC,aAAc,SAACC,GACXA,EAAML,SAAWM,QAAMC,SAAS,EAAG,CAACzB,OAAQ,QAC5CuB,EAAMJ,QAAU,GAChBI,EAAMH,UAAW,GAErBM,UAAW,SAACH,EAAOI,GACf,IAAMC,EAAQpB,EAASmB,EAAOE,QAASN,EAAML,UAC7CK,EAAMJ,QAAQW,QAAQF,GACtBL,EAAMH,SAAWQ,EAAMf,iBAAmBU,EAAML,SAASlB,WAStD+B,EAJDC,YAAe,CACzBC,QAASnB,EAAMmB,UAKNC,EAAUpB,EAAMoB,Q,OCtCvBC,EAAqB,CACvBT,UAAWQ,EAAQR,WA2BRU,EAzBGC,aANM,SAACd,GAAD,MAAwB,CAC5CL,SAAUK,EAAML,YAKuBiB,EAyB5BC,EAtBG,SAAC,GAAkC,IAAjClB,EAAgC,EAAhCA,SAAUQ,EAAsB,EAAtBA,UAAsB,EAExBY,mBAAS,IAFe,mBAEzCC,EAFyC,KAEnCC,EAFmC,KAchD,OACI,uBAAMC,SAP0C,SAACC,GACjDA,EAAMC,iBACNjB,EAAUa,GACVC,EAAQ,KAIR,UACI,qDAAuB,iCAAStB,EAASlB,SAAzC,mBACA,uBAAO4C,KAAK,OAAOC,WAAW,EAAMC,MAAOP,EAAMQ,SAbF,SAACL,GACpDF,EAAQE,EAAMM,OAAOF,gBCHdV,EATGC,aAHM,SAACd,GAAD,MAAwB,CAC5CJ,QAASI,EAAMJ,WAWJiB,EANE,SAAC,GAAD,IAAEjB,EAAF,EAAEA,QAAF,OACb,6BACKA,EAAQ8B,KAAI,SAAArB,GAAK,OAAK,+BAAKA,EAAMjC,UAAX,IAAuBiC,EAAMf,eAA7B,IAA8Ce,EAAM1B,0BCR7EiC,EAAqB,CACvBb,aAAcY,EAAQZ,cASXc,EAPGC,iBAAQa,EAAWf,EAOtBC,EAJO,SAAC,GAAD,IAAEd,EAAF,EAAEA,aAAF,OAClB,wBAAQ6B,QAAS,kBAAM7B,KAAvB,yBCUWc,EAXGC,aAJM,SAACd,GAAD,MAAwB,CAC5CL,SAAUK,EAAML,SAChBC,QAASI,EAAMJ,WAaJiB,EARE,SAAC,GAAD,IAAElB,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,QAAZ,OACb,wEACyC,iCAASD,IADlD,IACqE,uBADrE,2BAE4B,iCAASC,EAAQnB,SAF7C,UAEoE,uBAChE,cAAC,EAAD,UCNFmC,EAAqB,CACvBb,aAAcY,EAAQZ,cAkBXc,EAhBGC,aANM,SAACd,GAAD,MAAwB,CAC5CH,SAAUG,EAAMH,YAKuBe,EAgB5BC,EAbH,SAAC,GAAqC,IAApChB,EAAmC,EAAnCA,SAAUE,EAAyB,EAAzBA,aAKpB,OAJA8B,qBAAU,WACN9B,MACD,CAACA,IAGA,gCACKF,EAAW,cAAC,EAAD,IAAe,cAAC,EAAD,IAC3B,cAAC,EAAD,UCVGiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUjC,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e844cea.chunk.js","sourcesContent":["import {Guess} from './index';\n\nconst evaluate = (candidate: string, solution: string): Guess => {\n    const candidateChars = candidate.toLowerCase().split('');\n    const solutionChars = solution.toLowerCase().split('');\n    const correctLetters = evaluateCorrect(candidateChars, solutionChars);\n    const presentLetters = evaluatePresent(candidateChars, solutionChars) - correctLetters;\n\n    return {\n        candidate,\n        correctLetters,\n        presentLetters\n    }\n}\n\nconst evaluateCorrect = (candidate: string[], solution: string[]) =>\n    candidate.filter((char, index) => solution[index] === char).length;\n\nconst evaluatePresent = (candidate: string[], solution: string[]) => {\n    let presentLetters = 0;\n    const count = new Map<string, number>();\n    for (const char of candidate) {\n        count.set(char, (count.get(char) ?? 0) + 1);\n        if (solution.filter(c => c === char).length >= count.get(char)!) {\n            presentLetters++;\n        }\n    }\n    return presentLetters;\n}\n\nexport default evaluate;\n","import {configureStore, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport evaluate from './evaluator';\nimport {rword} from 'rword';\n\nexport type Guess = {\n    candidate: string,\n    correctLetters: number,\n    presentLetters: number\n}\n\ntype SliceState = {\n    codeword: string,\n    guesses: Guess[],\n    gameOver: boolean\n}\n\nconst initialState: SliceState = {\n    codeword: '',\n    guesses: [],\n    gameOver: false\n}\n\nconst slice = createSlice({\n    name: 'masterword',\n    initialState,\n    reducers: {\n        startNewGame: (state) => {\n            state.codeword = rword.generate(1, {length: '5-8'}) as string;\n            state.guesses = [];\n            state.gameOver = false;\n        },\n        guessWord: (state, action: PayloadAction<string>) => {\n            const guess = evaluate(action.payload, state.codeword);\n            state.guesses.unshift(guess);\n            state.gameOver = guess.correctLetters === state.codeword.length;\n        }\n    }\n});\n\nconst store = configureStore({\n    reducer: slice.reducer\n});\n\nexport default store;\nexport type StoreState = ReturnType<typeof store.getState>;\nexport const actions = slice.actions;\n","import React, {ChangeEventHandler, FormEventHandler, useState} from 'react';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {actions, StoreState} from '../store';\n\nconst mapStateToProps = (state: StoreState) => ({\n    codeword: state.codeword\n});\nconst mapDispatchToProps = {\n    guessWord: actions.guessWord\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst WordInput = ({codeword, guessWord}: Props) => {\n\n    const [word, setWord] = useState(\"\");\n\n    const onChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        setWord(event.target.value);\n    }\n\n    const onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n        event.preventDefault();\n        guessWord(word);\n        setWord(\"\");\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <div>I'm thinking of a <strong>{codeword.length}</strong> letter word.</div>\n            <input type=\"text\" autoFocus={true} value={word} onChange={onChange}/>\n        </form>\n    );\n}\n\nexport default connector(WordInput);\n","import {StoreState} from \"../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapStateToProps = (state: StoreState) => ({\n    guesses: state.guesses\n})\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst WordList = ({guesses}: Props) => (\n    <ul>\n        {guesses.map(guess => (<li>{guess.candidate} {guess.correctLetters} {guess.presentLetters}</li>))}\n    </ul>\n);\n\nexport default connector(WordList);\n","import {actions} from '../store';\nimport {connect, ConnectedProps} from 'react-redux';\n\nconst mapDispatchToProps = {\n    startNewGame: actions.startNewGame\n};\nconst connector = connect(undefined, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst NewGameButton = ({startNewGame}: Props) => (\n    <button onClick={() => startNewGame()}>New Game</button>\n);\n\nexport default connector(NewGameButton);\n","import {StoreState} from '../store';\nimport {connect, ConnectedProps} from 'react-redux';\nimport NewGameButton from './NewGameButton';\nimport React from 'react';\n\nconst mapStateToProps = (state: StoreState) => ({\n    codeword: state.codeword,\n    guesses: state.guesses\n});\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst GameOver = ({codeword, guesses}: Props) => (\n    <div>\n        Correct! The word I'm thinking of is <strong>{codeword}</strong>.<br />\n        You guessed the word in <strong>{guesses.length}</strong> tries.<br />\n        <NewGameButton />\n    </div>\n);\n\nexport default connector(GameOver);\n","import React, {useEffect} from 'react';\nimport WordInput from './components/WordInput';\nimport WordList from './components/WordList';\nimport {actions, StoreState} from './store';\nimport {connect, ConnectedProps} from 'react-redux';\nimport GameOver from './components/GameOver';\n\nconst mapStateToProps = (state: StoreState) => ({\n    gameOver: state.gameOver\n});\nconst mapDispatchToProps = {\n    startNewGame: actions.startNewGame\n}\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst App = ({gameOver, startNewGame}: Props) => {\n    useEffect(() => {\n        startNewGame();\n    }, [startNewGame]);\n\n    return (\n        <div>\n            {gameOver ? <GameOver /> : <WordInput />}\n            <WordList />\n        </div>\n    );\n};\n\nexport default connector(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}