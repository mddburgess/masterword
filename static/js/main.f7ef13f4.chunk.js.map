{"version":3,"sources":["store/index.ts","components/WordInput.tsx","components/WordList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["slice","createSlice","name","initialState","codeword","guesses","reducers","guessWord","state","action","unshift","candidate","payload","correctLetters","presentLetters","store","configureStore","reducer","actions","mapDispatchToProps","connector","connect","undefined","useState","word","setWord","onSubmit","event","preventDefault","type","autoFocus","value","onChange","target","map","guess","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAkBMA,EAAQC,YAAY,CACtBC,KAAM,aACNC,aAP6B,CAC7BC,SAAU,QACVC,QAAS,IAMTC,SAAU,CACNC,UAAY,SAACC,EAAOC,GAChBD,EAAMH,QAAQK,QAAQ,CAClBC,UAAWF,EAAOG,QAClBC,eAAgB,EAChBC,eAAgB,QAUjBC,EAJDC,YAAe,CACzBC,QAASjB,EAAMiB,UAKNC,EAAUlB,EAAMkB,Q,OClCvBC,EAAqB,CACvBZ,UAAWW,EAAQX,WA0BRa,EAxBGC,iBAAQC,EAAWH,EAwBtBC,EArBG,SAAC,GAAwB,IAAvBb,EAAsB,EAAtBA,UAAsB,EAEdgB,mBAAS,IAFK,mBAE/BC,EAF+B,KAEzBC,EAFyB,KActC,OACI,sBAAMC,SAP0C,SAACC,GACjDA,EAAMC,iBACNrB,EAAUiB,GACVC,EAAQ,KAIR,SACI,uBAAOI,KAAK,OAAOC,WAAW,EAAMC,MAAOP,EAAMQ,SAZF,SAACL,GACpDF,EAAQE,EAAMM,OAAOF,eCAdX,EATGC,aAHM,SAACb,GAAD,MAAwB,CAC5CH,QAASG,EAAMH,WAWJe,EANE,SAAC,GAAD,IAAEf,EAAF,EAAEA,QAAF,OACb,6BACKA,EAAQ6B,KAAI,SAAAC,GAAK,OAAK,+BAAKA,EAAMxB,UAAX,IAAuBwB,EAAMtB,eAA7B,IAA8CsB,EAAMrB,0BCMpEsB,MAXf,WACI,OACI,cAAC,IAAD,CAAUrB,MAAOA,EAAjB,SACI,sBAAKsB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,UCGDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7ef13f4.chunk.js","sourcesContent":["import {configureStore, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\ntype Guess = {\n    candidate: string,\n    correctLetters: number,\n    presentLetters: number\n}\n\ntype SliceState = {\n    codeword: string,\n    guesses: Guess[]\n}\n\nconst initialState: SliceState = {\n    codeword: \"react\",\n    guesses: []\n}\n\nconst slice = createSlice({\n    name: \"masterword\",\n    initialState,\n    reducers: {\n        guessWord: ((state, action: PayloadAction<string>) => {\n            state.guesses.unshift({\n                candidate: action.payload,\n                correctLetters: 0,\n                presentLetters: 0\n            })\n        })\n    }\n});\n\nconst store = configureStore({\n    reducer: slice.reducer\n});\n\nexport default store;\nexport type StoreState = ReturnType<typeof store.getState>;\nexport const actions = slice.actions;\n","import {ChangeEventHandler, FormEventHandler, useState} from 'react';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {actions} from '../store';\n\nconst mapDispatchToProps = {\n    guessWord: actions.guessWord\n}\nconst connector = connect(undefined, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst WordInput = ({guessWord}: Props) => {\n\n    const [word, setWord] = useState(\"\");\n\n    const onChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n        setWord(event.target.value);\n    }\n\n    const onSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n        event.preventDefault();\n        guessWord(word);\n        setWord(\"\");\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input type=\"text\" autoFocus={true} value={word} onChange={onChange}/>\n        </form>\n    );\n}\n\nexport default connector(WordInput);\n","import {StoreState} from \"../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapStateToProps = (state: StoreState) => ({\n    guesses: state.guesses\n})\nconst connector = connect(mapStateToProps);\ntype Props = ConnectedProps<typeof connector>;\n\nconst WordList = ({guesses}: Props) => (\n    <ul>\n        {guesses.map(guess => (<li>{guess.candidate} {guess.correctLetters} {guess.presentLetters}</li>))}\n    </ul>\n);\n\nexport default connector(WordList);\n","import React from 'react';\nimport WordInput from \"./components/WordInput\";\nimport WordList from \"./components/WordList\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <WordInput/>\n                <WordList/>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}